// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	models "github.com/Asymmetriq/shortener/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BatchDelete mocks base method.
func (m *MockRepository) BatchDelete(ctx context.Context, req models.DeleteRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BatchDelete", ctx, req)
}

// BatchDelete indicates an expected call of BatchDelete.
func (mr *MockRepositoryMockRecorder) BatchDelete(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockRepository)(nil).BatchDelete), ctx, req)
}

// Close mocks base method.
func (m *MockRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// GetAllURLs mocks base method.
func (m *MockRepository) GetAllURLs(ctx context.Context, userID string) ([]models.StorageEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllURLs", ctx, userID)
	ret0, _ := ret[0].([]models.StorageEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllURLs indicates an expected call of GetAllURLs.
func (mr *MockRepositoryMockRecorder) GetAllURLs(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllURLs", reflect.TypeOf((*MockRepository)(nil).GetAllURLs), ctx, userID)
}

// GetURL mocks base method.
func (m *MockRepository) GetURL(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockRepositoryMockRecorder) GetURL(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockRepository)(nil).GetURL), ctx, id)
}

// PingContext mocks base method.
func (m *MockRepository) PingContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockRepositoryMockRecorder) PingContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockRepository)(nil).PingContext), ctx)
}

// SetBatchURLs mocks base method.
func (m *MockRepository) SetBatchURLs(ctx context.Context, entry []models.StorageEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBatchURLs", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBatchURLs indicates an expected call of SetBatchURLs.
func (mr *MockRepositoryMockRecorder) SetBatchURLs(ctx, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBatchURLs", reflect.TypeOf((*MockRepository)(nil).SetBatchURLs), ctx, entry)
}

// SetURL mocks base method.
func (m *MockRepository) SetURL(ctx context.Context, entry models.StorageEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetURL", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetURL indicates an expected call of SetURL.
func (mr *MockRepositoryMockRecorder) SetURL(ctx, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetURL", reflect.TypeOf((*MockRepository)(nil).SetURL), ctx, entry)
}
